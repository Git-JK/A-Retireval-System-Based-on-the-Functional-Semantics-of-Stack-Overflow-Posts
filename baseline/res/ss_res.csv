query,top_ss
how to return the response from an asynchronous call,"[['callback will refer to the function we pass to foo when we call it and we simply pass it on to success. i.e. once the ajax request is successful, $.ajax will call callback and pass the response to the callback (which can be referred to with result, since this is how we defined the callback).', 14220323], ['the a in ajax stands for asynchronous . that means sending the request (or rather receiving the response) is taken out of the normal execution flow. in your example, $.ajax returns immediately and the next statement, return result;, is executed before the function you passed as success callback was even called.', 14220323], ['thus, the summary is - to tackle the asynchronous functions like ajax based calls etc., you can use a promise to resolve the value (which you intend to return). thus, in short you resolve value instead of returning, in asynchronous functions.', 47043798], ['describing all the advantages that promise offer is beyond the scope of this answer, but if you write new code, you should seriously consider them. they provide a great abstraction and separation of your code.', 14220323], [""keep in mind that if you're doing a cross-domain ajax call (by using jsonp) - you can't do it synchronously, the async flag will be ignored by jquery."", 30148405], ['short answer: your foo() method returns immediately, while the $ajax() call executes asynchronously after the function returns. the problem is then how or where to store the results retrieved by the async call once it returns.', 32750752], [""of course there are many approaches like synchronous request, promise, but from my experience i think you should use the callback approach. it's natural to asynchronous behavior of javascript. so, your code snippet can be rewrite a little different:"", 44935441], ['keep in mind that promises and deferred objects are just containers for a future value, they are not the value itself. for example, suppose you had the following:', 14220323], ['current browser and node versions support async/await. you can also support older environments by transforming your code to es5 with the help of regenerator (or tools that use regenerator, such as babel).', 14220323], ['async/await builds on top of promises: an async function always returns a promise. await ""unwraps"" a promise and either result in the value the promise was resolved with or throws an error if the promise was rejected.', 14220323]]"
how to convert an int to string?,"[['if the change attempt fails – in this case, if you can try to convert the java string test to an int — the integer parseint process will throw a numberformatexception, which you must handle in a try/catch block.', 53228578], ['if you look at the java documentation you\'ll notice the ""catch"" is that this function can throw a numberformatexception, which of course you have to handle:', 5585800], ['convert a string to an integer with the parseint method of the java integer class. the parseint method is to convert the string to an int and throws a numberformatexception if the string cannot be converted to an int type.', 53228578], ['use function itoa() to convert an integer to a string', 52677014], [""i wrote this fast method to parse a string input into int or long. it is faster than the current jdk 11 integer.parseint or long.parselong. although, you only asked for int, i also included the long parser. the code parser below requires that the parser's method must be small for it to operate quickly. an alternative version is below the test code. the alternative version is pretty quick and it does not depend on the size of the class."", 54282976], ['some of the ways to convert string into int are as follows:', 54561825], ['whenever there is the slightest possibility that the given string does not contain an integer, you have to handle this special case. sadly, the standard java methods integer::parseint and integer::valueof throw a numberformatexception to signal this special case. thus, you have to use exceptions for flow control, which is generally considered bad coding style.', 36394016], ['personally i think that """" + i does look as the original question poster states ""smelly"". i have used a lot of oo languages besides java. if that syntax was intended to be appropriate then java would just interpret the i alone without needing the """" as desired to be converted to a string and do it since the destination type is unambiguous and only a single value would be being supplied on the right. the other seems like a \'trick"" to fool the compiler, bad mojo when different versions of javac made by other manufacturers or from other platforms are considered if the code ever needs to be ported. heck for my money it should like many other ool\'s just take a typecast: (string) i. winks', 16121265], ['edit: as pointed out in the comment, itoa() is not a standard, so better use sprintf() approach suggested in the rivaling answer!', 8257754], ['if works for every format string, so you can convert float or double to string by using ""%g"", you can convert int to hex using ""%x"", and so on.', 32819876]]"
how can I prevent sql injection in php?,"[[""what is mandatory, however, is the first setattribute() line, which tells pdo to disable emulated prepared statements and use real prepared statements. this makes sure the statement and the values aren't parsed by php before sending it to the mysql server (giving a possible attacker no chance to inject malicious sql)."", 60496], ['use prepared statements and parameterized queries. these are sql statements that are sent to and parsed by the database server separately from any parameters. this way it is impossible for an attacker to inject malicious sql.', 60496], ['security warning: this answer is not in line with security best practices. escaping is inadequate to prevent sql injection, use prepared statements instead. use the strategy outlined below at your own risk. (also, mysql_real_escape_string() was removed in php 7.)', 12426697], [""deprecated warning: this answer's sample code (like the question's sample code) uses php's mysql extension, which was deprecated in php 5.5.0 and removed entirely in php 7.0.0."", 60442], ['regardless of what php manual said for ages, *_escape_string by no means makes data safe and never has been intended to. besides being useless for any sql part other than string, manual escaping is wrong, because it is manual as opposite to automated.', 8255054], [""deprecated warning: this answer's sample code (like the question's sample code) uses php's mysql extension, which was deprecated in php 5.5.0 and removed entirely in php 7.0.0."", 6381189], ['the sql statement you pass to prepare is parsed and compiled by the database server. by specifying parameters (either a ? or a named parameter like :name in the example above) you tell the database engine where you want to filter on. then when you call execute, the prepared statement is combined with the parameter values you specify.', 60496], [""deprecated warning: this answer's sample code (like the question's sample code) uses php's mysql extension, which was deprecated in php 5.5.0 and removed entirely in php 7.0.0."", 6565763], [""warning: the approach described in this answer only applies to very specific scenarios and isn't secure since sql injection attacks do not only rely on being able to inject x=y."", 15805869], [""deprecated warning: this answer's sample code (like the question's sample code) uses php's mysql extension, which was deprecated in php 5.5.0 and removed entirely in php 7.0.0."", 21179234]]"
how do I compare strings in java?,"[[""in pretty much either one, the way is to call strcmp. if your strings (for some weird reason) aren't nul terminated, you should use strncmp instead."", 2330384], [""if you want to do something when they don't match, replace = with !=. you can read more about string operations and arithmetic operations in their respective documentation."", 2237103], [""you should really use qsort (in c, #include <stdlib.h>) or std::sort (in c++, #include <algorithm>) instead of a bubble sort like this. if it's c++ and you take @t.e.d.'s advice to use std::string instead of raw c strings, you don't even have to specify a comparison because the < operator will be used and will do the right thing."", 2330642], ['edit: as a totally far-out idea - i have no idea whether this is feasible at all, especially because of performance concerns - if you are working with php/mysql on the back-end anyway, i would like to mention the possibility of sending an ajax query to a mysql instance to have it sorted there. mysql is great at sorting locale aware data, because you can force sorting operations into a specific collation using e.g. order by xyz collate utf8_polish_ci, collate utf8_german_ci.... those collations would take care of all sorting woes at once.', 3630750], ['when you need to compare two char pointers specifically, you can compare them in the usual way: by using comparison operators <, >, == etc.', 2330672], ['this is what java internal code uses (on other compare methods):', 11271611], ['use either the first case wherein the quotes around $x are optional:', 2237103], ['you want the quotes around $x, because if it is empty, your bash script encounters a syntax error as seen below:', 2237103], ['tokenize the strings with the dot as delimiter and then compare the integer translation side by side, beginning from the left.', 198442], ['to compare strings with wildcards use', 16263820]]"
